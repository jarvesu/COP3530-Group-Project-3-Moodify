#pragma once
#include <string>
#include <vector>
#include <iostream>
using namespace std;
class Song
{
private:
    /* DATA NEEDED FOR OUTPUT */
    std::string id;                       //Primary identifier for the track, generated by Spotify
    std::string name;                     //The title of the track
    std::string artists;     //The list of artists credited for production of the track
    int duration_ms;                      //The length of the track in seconds
    float distance;                       //Final Parameter we are interested in

    /* USER INPUT PARAMETERS */
    bool _explicit;                       //Whether the track contains explicit content or not
    float acousticness;                   //Metric of the track being acoustic
    float danceability;                   //Metric of the track being danceable
    float energy;                         //Metric of the energy of the track
    float instrumentalness;               //Metric of the track being instrumental
    float liveness;                       //Metric of the track sounding as a live performance
    float speechiness;                    //Metric of the track containing human voice
    float happiness;                      //Metric of the positiveness of the track
    float tempo;                          //The tempo of the track in BPM as its reciprocal

public:

    //Constructor
    Song(std::string id, std::string name, std::string duration_ms, std::string _explicit, std::string artists, std::string danceability, std::string energy, std::string speechiness, std::string acousticness, std::string instrumentalness, std::string liveness, std::string tempo, std::string happiness)
    {
        cout << acousticness << endl;
        this->acousticness = stof(acousticness);
        cout << artists << endl;
        this->artists = artists.substr(1, artists.size() - 1);
        cout << danceability << endl;
        this->danceability = stof(danceability);
        cout << duration_ms << endl;
        this->duration_ms = (int)(stof(duration_ms) / 1000);
        cout << energy << endl;
        this->energy = stof(energy);
        cout << _explicit << endl;
        this->_explicit = (_explicit == "1") ? true : false;
        cout << id << endl;
        this->id = id;
        cout << instrumentalness << endl;
        this->instrumentalness = stof(instrumentalness);
        cout << liveness << endl;
        this->liveness = stof(liveness);
        cout << name << endl;
        this->name = name;
        cout << speechiness << endl;
        this->speechiness = stof(speechiness);
        cout << tempo << endl;
        this->tempo = 1 / stof(tempo);
        cout << happiness << endl;
        this->happiness = stof(happiness);
        this->distance = 0.0f;
    }

    //Getters
    float getAcousticness() { return acousticness; }
    std::string getArtists() { return artists; }
    float getDanceability() { return danceability; }
    int getDuration() { return duration_ms; }
    float getEnergy() { return energy; }
    bool getExplicit() { return _explicit; }
    std::string getID() { return id; }
    float getInstrumentalness() { return instrumentalness; }
    float getLiveness() { return liveness; }
    std::string getName() { return name; }
    float getSpeechiness() { return speechiness; }
    float getTempo() { return tempo; }
    float getHappiness() { return happiness; }
    float getDistance() { return distance; }
};